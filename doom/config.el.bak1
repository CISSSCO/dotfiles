;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
;; (setq user-full-name "John Doe"
;;       user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-symbol-font' -- for symbols
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-one)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")


;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

;; org journal settings
(setq org-journal-date-prefix "#+TITLE: "
      org-journal-time-prefix "** "
      org-journal-date-format "%a, %d-%m-%Y"
      org-journal-file-format "%d-%m-%Y.org")

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (C . t)
   (C++ . t)
   (fortran . t)
   (bash . t)
   (javascript . t)))

(setq org-confirm-babel-evaluate nil)
(setq-default evil-escape-key-sequence "kj")
(setq-default evil-escape-key-sequence "jk")

;; Basic Org mode setup
(setq org-hide-emphasis-markers t)
(add-hook 'org-mode-hook 'visual-line-mode)
(add-hook 'org-mode-hook 'org-indent-mode)

;; Customize heading sizes in Org mode
;;(defun my/org-present-heading-sizes ()
;;  "Set custom sizes for Org mode headings."
;;  (set-face-attribute 'org-level-1 nil :height 2.0)
;;  (set-face-attribute 'org-level-2 nil :height 1.85)
;;  (set-face-attribute 'org-level-3 nil :height 1.70)
;;  (set-face-attribute 'org-level-4 nil :height 1.55)
;;  (set-face-attribute 'org-level-5 nil :height 1.40)
;;  (set-face-attribute 'org-level-6 nil :height 1.25)
;;  (set-face-attribute 'org-level-7 nil :height 1.10)
;;  (set-face-attribute 'org-level-8 nil :height 1.0))


;; Customize heading sizes in Org mode
(defun my/org-present-heading-sizes ()
  "Set custom sizes for Org mode headings."
  (set-face-attribute 'org-document-title nil :height 2.0)
  (set-face-attribute 'org-level-1 nil :height 1.65)
  (set-face-attribute 'org-level-2 nil :height 1.55)
  (set-face-attribute 'org-level-3 nil :height 1.45)
  (set-face-attribute 'org-level-4 nil :height 1.35)
  (set-face-attribute 'org-level-5 nil :height 1.25)
  (set-face-attribute 'org-level-6 nil :height 1.15)
  (set-face-attribute 'org-level-7 nil :height 1.10)
  (set-face-attribute 'org-level-8 nil :height 1.0))

(defun my/org-present-restore-heading-sizes ()
  "Restore default sizes for headings after exiting org-present mode."
  (set-face-attribute 'org-document-title nil :height 1.3)
  (set-face-attribute 'org-level-1 nil :height 1.0)
  (set-face-attribute 'org-level-2 nil :height 1.0)
  (set-face-attribute 'org-level-3 nil :height 1.0)
  (set-face-attribute 'org-level-4 nil :height 1.0)
  (set-face-attribute 'org-level-5 nil :height 1.0)
  (set-face-attribute 'org-level-6 nil :height 1.0)
  (set-face-attribute 'org-level-7 nil :height 1.0)
  (set-face-attribute 'org-level-8 nil :height 1.0))

(defun my/org-present-start ()
  "Custom settings for org-present mode."
  ;; Set font size for headings
  (my/org-present-heading-sizes)
  ;; Center the text
  (setq-local visual-fill-column-center-text t)
  (setq-local visual-fill-column-width 100)
  (visual-fill-column-mode 1)
  ;; Prepare each slide
  (my/org-present-prepare-slide)
  ;; Hide org mode markers
  (org-hide-emphasis-markers t)
  ;; Turn on org-indent mode
  (org-indent-mode t)
  ;; Center first-level heading
  (setq header-line-format " ")
  (org-fold-hide-sublevels))

(defun my/org-present-end ()
  "Revert settings when org-present mode ends."
  ;; Restore default font size settings
  (my/org-present-restore-heading-sizes)
  ;; Remove centering
  (visual-fill-column-mode 0)
  ;; Restore org mode markers
  (org-hide-emphasis-markers nil)
  ;; Turn off org-indent mode
  (org-indent-mode -1)
  (setq header-line-format nil))

(defun my/org-present-prepare-slide ()
  "Custom behavior for each slide in org-present."
  (interactive)
  (org-overview)
  (org-show-children)
  (org-show-entry))

(add-hook 'org-present-mode-hook 'my/org-present-start)
(add-hook 'org-present-mode-quit-hook 'my/org-present-end)
(add-hook 'org-present-mode-hook 'my/org-present-prepare-slide)
;;(add-hook 'org-present-after-navigate-functions 'my/org-present-prepare-slide)


;; (add-hook 'org-mode-hook 'my/org-mode-heading-sizes)
